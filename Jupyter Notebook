{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c41e9115-54d8-469e-84cb-72646465dca9",
   "metadata": {},
   "source": [
    "# INDIA'S METAL EXPORTS \n",
    "* #### Export amounts\n",
    "* #### Country-wise demand \n",
    "* #### Trend Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f6f70de-6a24-41be-8a24-b348dc17a2ee",
   "metadata": {},
   "source": [
    "### LIBRARIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "68a4521b-837d-4989-96be-f2aedfd9b459",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\hp\\anaconda3\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy>=1.26.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2.1.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\hp\\anaconda3\\lib\\site-packages (3.10.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: numpy>=1.23 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (2.1.3)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (3.2.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
      "Requirement already satisfied: seaborn in c:\\users\\hp\\anaconda3\\lib\\site-packages (0.13.2)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from seaborn) (2.1.3)\n",
      "Requirement already satisfied: pandas>=1.2 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from seaborn) (2.2.3)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from seaborn) (3.10.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas>=1.2->seaborn) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n",
      "Requirement already satisfied: micropip in c:\\users\\hp\\anaconda3\\lib\\site-packages (0.10.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas\n",
    "!pip install matplotlib\n",
    "!pip install seaborn\n",
    "!pip install micropip\n",
    "\n",
    "import micropip\n",
    "await micropip.install('pandas')\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c03f033-8962-4c5c-921a-cd07d9c98a2d",
   "metadata": {},
   "source": [
    "**Libraries installed**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bfe32b3-1add-4bac-8a48-4f1fe2bbd099",
   "metadata": {},
   "source": [
    "### LOADING LOCAL DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "275eebc2-9771-4c6d-ab4f-7b84bb30eb50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COMMODITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>Value(US$ million)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MAURITANIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>2156.0</td>\n",
       "      <td>10.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MEXICO</td>\n",
       "      <td>TON</td>\n",
       "      <td>231743.0</td>\n",
       "      <td>663.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MONTENEGRO</td>\n",
       "      <td>TON</td>\n",
       "      <td>3783.0</td>\n",
       "      <td>9.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MOZAMBIQUE</td>\n",
       "      <td>TON</td>\n",
       "      <td>7681.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEPAL</td>\n",
       "      <td>TON</td>\n",
       "      <td>25828.0</td>\n",
       "      <td>87.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NETHERLAND</td>\n",
       "      <td>TON</td>\n",
       "      <td>306716.0</td>\n",
       "      <td>855.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEW ZEALAND</td>\n",
       "      <td>TON</td>\n",
       "      <td>1594.0</td>\n",
       "      <td>6.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>3922.0</td>\n",
       "      <td>15.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>OMAN</td>\n",
       "      <td>TON</td>\n",
       "      <td>4360.0</td>\n",
       "      <td>15.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MALDIVES</td>\n",
       "      <td>TON</td>\n",
       "      <td>1671.0</td>\n",
       "      <td>8.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              COMMODITY      COUNTRY UNIT  QUANTITY  Value(US$ million)\n",
       "0  ALUMINIUM & PRODUCTS   MAURITANIA  TON    2156.0               10.69\n",
       "1  ALUMINIUM & PRODUCTS       MEXICO  TON  231743.0              663.35\n",
       "2  ALUMINIUM & PRODUCTS   MONTENEGRO  TON    3783.0                9.64\n",
       "3  ALUMINIUM & PRODUCTS   MOZAMBIQUE  TON    7681.0               21.14\n",
       "4  ALUMINIUM & PRODUCTS        NEPAL  TON   25828.0               87.21\n",
       "5  ALUMINIUM & PRODUCTS   NETHERLAND  TON  306716.0              855.90\n",
       "6  ALUMINIUM & PRODUCTS  NEW ZEALAND  TON    1594.0                6.78\n",
       "7  ALUMINIUM & PRODUCTS      NIGERIA  TON    3922.0               15.63\n",
       "8  ALUMINIUM & PRODUCTS         OMAN  TON    4360.0               15.32\n",
       "9  ALUMINIUM & PRODUCTS     MALDIVES  TON    1671.0                8.83"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel(\"India's_Exports_2022_23.xlsx\")\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d118d389-8eb3-463a-be0c-eb6aac65caf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 233 entries, 0 to 232\n",
      "Data columns (total 5 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   COMMODITY           233 non-null    object \n",
      " 1   COUNTRY             233 non-null    object \n",
      " 2   UNIT                196 non-null    object \n",
      " 3   QUANTITY            196 non-null    float64\n",
      " 4   Value(US$ million)  233 non-null    float64\n",
      "dtypes: float64(2), object(3)\n",
      "memory usage: 9.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71827458-575c-44eb-bb85-d31b3426c5a3",
   "metadata": {},
   "source": [
    "### DROPPING NULLS FROM ORIGINAL DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "92a76b1c-c588-4aa2-9bac-0e3347eb4fae",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221e8c2f-916b-4da6-a6a0-d2c441fde233",
   "metadata": {},
   "source": [
    "**(inplace=True)** : makes the changes in the original dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d5d5562-a4ce-456d-8a6d-9822bded4f17",
   "metadata": {},
   "source": [
    "### DISPLAY NULLS COLUMN-WISE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f26d0d1f-8b64-40d4-93cb-1148bca64a59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "COMMODITY             0\n",
       "COUNTRY               0\n",
       "UNIT                  0\n",
       "QUANTITY              0\n",
       "Value(US$ million)    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() # .sum() also sums all the NULLS and gives final count at the bottom"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "986f2f9a-0e07-46bb-8cf0-c95c3ad9bd3b",
   "metadata": {},
   "source": [
    "Since NULLS already droped, all show 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79be2962-4de9-425f-8235-16e00ac110e6",
   "metadata": {},
   "source": [
    "### IDENTIFYING DUPLICATE ROWS\n",
    "1. Counting the number of duplicate rows in the dataset.\n",
    "2. Display the first few duplicate rows to understand their structure.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d0128851-2a08-4ef5-a7df-65ba1d3502f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate rows: 0\n",
      "No duplicate rows found.\n"
     ]
    }
   ],
   "source": [
    "# Count the number of duplicate rows\n",
    "duplicate_count = df.duplicated().sum()\n",
    "print(f\"Number of duplicate rows: {duplicate_count}\")\n",
    "\n",
    "# Display the first few duplicate rows (if any)\n",
    "if duplicate_count > 0:\n",
    "    print(\"\\nSample duplicate rows:\")\n",
    "    display(df[df.duplicated()].head())\n",
    "else:\n",
    "    print(\"No duplicate rows found.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfb9f659-0355-4cf1-9eb2-94df56622d34",
   "metadata": {},
   "source": [
    "### Analyze Characteristics of Duplicates¶\n",
    "Identify which columns have the same values in duplicate rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c74e6f43-7011-4358-ad24-620f9c17e337",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total groups of exact duplicates: 0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COMMODITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>Value(US$ million)</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [COMMODITY, COUNTRY, UNIT, QUANTITY, Value(US$ million), Count]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Extract all duplicate rows (excluding the first occurrence)\n",
    "duplicates = df[df.duplicated(keep=False)]\n",
    "\n",
    "# Group duplicates by all columns and count occurrences\n",
    "duplicate_groups = duplicates.groupby(list(df.columns)).size().reset_index(name='Count')\n",
    "\n",
    "# Display the structure of duplicate rows\n",
    "print(f\"Total groups of exact duplicates: {len(duplicate_groups)}\")\n",
    "display(duplicate_groups.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20834e15-c9ba-4f47-aa09-e18d905e9312",
   "metadata": {},
   "source": [
    "No duplicates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7946b4de-6ac9-4843-bbcd-3606ddab6c32",
   "metadata": {},
   "source": [
    "### DROPPING ROWS WITH TRADE < $5M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1a1caba-8972-4bbc-bb1d-2de43b91e0a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ File 'India's_Exports_2022_23.xlsx' updated. Rows with Value(US$ million) < 5 have been removed.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Step 2: Define file path and target column\n",
    "file_path = \"India's_Exports_2022_23.xlsx\"      \n",
    "sheet_name = 'Metal Exports'                \n",
    "target_column = 'Value(US$ million)'   \n",
    "\n",
    "# Step 3: Load the dataset\n",
    "df = pd.read_excel(file_path, sheet_name=sheet_name)\n",
    "\n",
    "# Step 4: Drop rows with values < 5 in the specified column\n",
    "df = df[df[target_column] >= 5]\n",
    "\n",
    "# Step 5: Save the updated dataset back to the original Excel file\n",
    "df.to_excel(file_path, index=False, sheet_name=sheet_name)\n",
    "\n",
    "print(f\"✅ File '{file_path}' updated. Rows with {target_column} < 5 have been removed.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "504a9053-10ec-46c4-8686-1e3c8eedf181",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COMMODITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>Value(US$ million)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MAURITANIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>2156.0</td>\n",
       "      <td>10.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MEXICO</td>\n",
       "      <td>TON</td>\n",
       "      <td>231743.0</td>\n",
       "      <td>663.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MONTENEGRO</td>\n",
       "      <td>TON</td>\n",
       "      <td>3783.0</td>\n",
       "      <td>9.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MOZAMBIQUE</td>\n",
       "      <td>TON</td>\n",
       "      <td>7681.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEPAL</td>\n",
       "      <td>TON</td>\n",
       "      <td>25828.0</td>\n",
       "      <td>87.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>NICKEL &amp; PRODUCTS</td>\n",
       "      <td>SINGAPORE</td>\n",
       "      <td>TON</td>\n",
       "      <td>478.0</td>\n",
       "      <td>11.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>NICKEL &amp; PRODUCTS</td>\n",
       "      <td>THAILAND</td>\n",
       "      <td>TON</td>\n",
       "      <td>429.0</td>\n",
       "      <td>8.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>NICKEL &amp; PRODUCTS</td>\n",
       "      <td>U ARAB EMTS</td>\n",
       "      <td>TON</td>\n",
       "      <td>271.0</td>\n",
       "      <td>8.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>NICKEL &amp; PRODUCTS</td>\n",
       "      <td>U K</td>\n",
       "      <td>TON</td>\n",
       "      <td>974.0</td>\n",
       "      <td>17.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>NICKEL &amp; PRODUCTS</td>\n",
       "      <td>U S A</td>\n",
       "      <td>TON</td>\n",
       "      <td>414.0</td>\n",
       "      <td>16.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>233 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                COMMODITY      COUNTRY UNIT  QUANTITY  Value(US$ million)\n",
       "0    ALUMINIUM & PRODUCTS   MAURITANIA  TON    2156.0               10.69\n",
       "1    ALUMINIUM & PRODUCTS       MEXICO  TON  231743.0              663.35\n",
       "2    ALUMINIUM & PRODUCTS   MONTENEGRO  TON    3783.0                9.64\n",
       "3    ALUMINIUM & PRODUCTS   MOZAMBIQUE  TON    7681.0               21.14\n",
       "4    ALUMINIUM & PRODUCTS        NEPAL  TON   25828.0               87.21\n",
       "..                    ...          ...  ...       ...                 ...\n",
       "228     NICKEL & PRODUCTS    SINGAPORE  TON     478.0               11.38\n",
       "229     NICKEL & PRODUCTS     THAILAND  TON     429.0                8.04\n",
       "230     NICKEL & PRODUCTS  U ARAB EMTS  TON     271.0                8.32\n",
       "231     NICKEL & PRODUCTS          U K  TON     974.0               17.12\n",
       "232     NICKEL & PRODUCTS        U S A  TON     414.0               16.29\n",
       "\n",
       "[233 rows x 5 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "364fe482-7fb5-4b65-93af-3f20c49ff3ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COMMODITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>Value(US$ million)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MAURITANIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>2156.0</td>\n",
       "      <td>10.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MEXICO</td>\n",
       "      <td>TON</td>\n",
       "      <td>231743.0</td>\n",
       "      <td>663.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MONTENEGRO</td>\n",
       "      <td>TON</td>\n",
       "      <td>3783.0</td>\n",
       "      <td>9.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MOZAMBIQUE</td>\n",
       "      <td>TON</td>\n",
       "      <td>7681.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEPAL</td>\n",
       "      <td>TON</td>\n",
       "      <td>25828.0</td>\n",
       "      <td>87.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NETHERLAND</td>\n",
       "      <td>TON</td>\n",
       "      <td>306716.0</td>\n",
       "      <td>855.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEW ZEALAND</td>\n",
       "      <td>TON</td>\n",
       "      <td>1594.0</td>\n",
       "      <td>6.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>3922.0</td>\n",
       "      <td>15.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>OMAN</td>\n",
       "      <td>TON</td>\n",
       "      <td>4360.0</td>\n",
       "      <td>15.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MALDIVES</td>\n",
       "      <td>TON</td>\n",
       "      <td>1671.0</td>\n",
       "      <td>8.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MALAYSIA</td>\n",
       "      <td>TON</td>\n",
       "      <td>291409.0</td>\n",
       "      <td>786.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>IRAQ</td>\n",
       "      <td>TON</td>\n",
       "      <td>7401.0</td>\n",
       "      <td>21.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>ISRAEL</td>\n",
       "      <td>TON</td>\n",
       "      <td>10391.0</td>\n",
       "      <td>49.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>TON</td>\n",
       "      <td>175169.0</td>\n",
       "      <td>505.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>JAPAN</td>\n",
       "      <td>TON</td>\n",
       "      <td>114478.0</td>\n",
       "      <td>291.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>KENYA</td>\n",
       "      <td>TON</td>\n",
       "      <td>10212.0</td>\n",
       "      <td>41.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>KOREA RP</td>\n",
       "      <td>TON</td>\n",
       "      <td>345805.0</td>\n",
       "      <td>925.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>KUWAIT</td>\n",
       "      <td>TON</td>\n",
       "      <td>1276.0</td>\n",
       "      <td>7.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>PHILIPPINES</td>\n",
       "      <td>TON</td>\n",
       "      <td>1467.0</td>\n",
       "      <td>8.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>TAIWAN</td>\n",
       "      <td>TON</td>\n",
       "      <td>70405.0</td>\n",
       "      <td>190.41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               COMMODITY      COUNTRY UNIT  QUANTITY  Value(US$ million)\n",
       "0   ALUMINIUM & PRODUCTS   MAURITANIA  TON    2156.0               10.69\n",
       "1   ALUMINIUM & PRODUCTS       MEXICO  TON  231743.0              663.35\n",
       "2   ALUMINIUM & PRODUCTS   MONTENEGRO  TON    3783.0                9.64\n",
       "3   ALUMINIUM & PRODUCTS   MOZAMBIQUE  TON    7681.0               21.14\n",
       "4   ALUMINIUM & PRODUCTS        NEPAL  TON   25828.0               87.21\n",
       "5   ALUMINIUM & PRODUCTS   NETHERLAND  TON  306716.0              855.90\n",
       "6   ALUMINIUM & PRODUCTS  NEW ZEALAND  TON    1594.0                6.78\n",
       "7   ALUMINIUM & PRODUCTS      NIGERIA  TON    3922.0               15.63\n",
       "8   ALUMINIUM & PRODUCTS         OMAN  TON    4360.0               15.32\n",
       "9   ALUMINIUM & PRODUCTS     MALDIVES  TON    1671.0                8.83\n",
       "10  ALUMINIUM & PRODUCTS     MALAYSIA  TON  291409.0              786.46\n",
       "11  ALUMINIUM & PRODUCTS         IRAQ  TON    7401.0               21.33\n",
       "12  ALUMINIUM & PRODUCTS       ISRAEL  TON   10391.0               49.16\n",
       "13  ALUMINIUM & PRODUCTS        ITALY  TON  175169.0              505.38\n",
       "14  ALUMINIUM & PRODUCTS        JAPAN  TON  114478.0              291.67\n",
       "15  ALUMINIUM & PRODUCTS        KENYA  TON   10212.0               41.85\n",
       "16  ALUMINIUM & PRODUCTS     KOREA RP  TON  345805.0              925.48\n",
       "17  ALUMINIUM & PRODUCTS       KUWAIT  TON    1276.0                7.30\n",
       "18  ALUMINIUM & PRODUCTS  PHILIPPINES  TON    1467.0                8.49\n",
       "19  ALUMINIUM & PRODUCTS       TAIWAN  TON   70405.0              190.41"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8474f335-fd84-4fa3-bdf3-900260c6eb28",
   "metadata": {},
   "source": [
    "### DROPPING UNIT COLUMN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "103498cc-88b0-4d3b-b18e-2a8c7854b781",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_excel(\"India's_Exports_2022_23.xlsx\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "95bf0f4e-a456-4f13-9be7-725a04fd7d58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COMMODITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>Value(US$ million)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MAURITANIA</td>\n",
       "      <td>2156.0</td>\n",
       "      <td>10.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MEXICO</td>\n",
       "      <td>231743.0</td>\n",
       "      <td>663.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MONTENEGRO</td>\n",
       "      <td>3783.0</td>\n",
       "      <td>9.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>MOZAMBIQUE</td>\n",
       "      <td>7681.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALUMINIUM &amp; PRODUCTS</td>\n",
       "      <td>NEPAL</td>\n",
       "      <td>25828.0</td>\n",
       "      <td>87.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              COMMODITY     COUNTRY  QUANTITY  Value(US$ million)\n",
       "0  ALUMINIUM & PRODUCTS  MAURITANIA    2156.0               10.69\n",
       "1  ALUMINIUM & PRODUCTS      MEXICO  231743.0              663.35\n",
       "2  ALUMINIUM & PRODUCTS  MONTENEGRO    3783.0                9.64\n",
       "3  ALUMINIUM & PRODUCTS  MOZAMBIQUE    7681.0               21.14\n",
       "4  ALUMINIUM & PRODUCTS       NEPAL   25828.0               87.21"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56a2c5cb-9c98-4b48-b50e-4d616cad9630",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
